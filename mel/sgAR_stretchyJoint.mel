global proc sgAR_stretchyJoint(string $joint, string $axis){

string $joint;
string $axis;
string $a2;
string $a3;

if($axis == "x"){
	$a2 = "y";
	$a3 = "z";
	}
if($axis == "y"){
	$a2 = "x";
	$a3 = "z";
	}
if($axis == "z"){
	$a2 = "x";
	$a3 = "y";
	}

string $inverse = `shadingNode -n ($joint + "_INVERSE") -asUtility multiplyDivide`;
string $root = `shadingNode -n ($joint + "_ROOT") -asUtility multiplyDivide`;
string $mult = `shadingNode -n ($joint + "_MULT") -asUtility multiplyDivide`;


connectAttr -f ($joint + ".s" + $axis) ($inverse + ".input2X");
connectAttr -f ($inverse + ".outputX") ($root + ".input1X");
connectAttr -f ($root + ".outputX") ($mult + ".input1X");

setAttr -lock 1 ($inverse + ".input1X") 1;
setAttr -lock 1 ($inverse + ".operation") 2;
setAttr -lock 1 ($root + ".input2X") 0.5;
setAttr -lock 1 ($root + ".operation") 3;
setAttr -lock 1 ($mult + ".operation") 1;
setAttr -lock 0 ($mult + ".input2X") 1;

connectAttr -f ($mult + ".outputX") ($joint + ".s" + $a2);
connectAttr -f ($mult + ".outputX") ($joint + ".s" + $a3);

select -r $joint;

}


global proc sgAR_stretchyChain(string $joints[], string $axis){
string $joints[];
string $axis;
string $joint;
for($joint in $joints){
	sgAR_stretchyJoint($joint, $axis);
	}
}

